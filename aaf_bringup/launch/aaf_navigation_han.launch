<?xml version="1.0"?>
<launch>
  <arg name="with_chest_xtion" default="true"/>
  <arg name="chest_xtion_name" default="chest_xtion"/>
  <arg name="chest_xtion_machine" default="werner-right-cortex"/>
  <arg name="chest_xtion_user" default="strands"/>
  <arg name="head_xtion_machine" default="werner-left-cortex"/>
  <arg name="head_xtion_user" default="strands"/>
  <arg name="smtp_server"  default="werner:25"/>
  <arg name="from_add" 	default="henry.strands@hanheide.net" />
  <arg name="to_add" 	default="henry.strands@hanheide.net" />
  <arg name="topo_nav_machine" default="werner-right-cortex"/>
  <arg name="topo_nav_user" default="strands"/>

  <arg name="map"/>
  <arg name="with_no_go_map" default="false"/>
  <arg name="no_go_map" default=""/>
  <arg name="with_mux" default="false" />
  <arg name="topological_map"/>

  <arg name="mon_nav_config_file" default="$(find strands_recovery_behaviours)/config/monitored_nav_config.yaml"/>
  <arg name="wait_reset_bumper_duration" default="10.0"/>
  <arg name="z_stair_threshold" default="0.12"/>
  <arg name="z_obstacle_threshold" default="0.15"/>
  <arg name="with_head_xtion" default="true"/>

  <arg name="with_human_aware" default="true"/>
  <arg name="timeout" default="0.0" />
  <arg name="max_dist" default="4.0" />
  <arg name="min_dist" default="1.0" />
  <arg name="detection_angle" default="45.0" />
  <arg name="gaze_type" default="1" />

  <arg name="with_site_movebase_params" default="false"/>
  <arg name="site_movebase_params" default=""/>

  <arg name="subsample_resolution" default="0.05"/>
  <arg name="subsample_min_points" default="5"/>
  <arg name="subsample_skip_points" default="20"/>

  <!-- WARNING: This EBC will be powerded on and off during docking! -->
  <arg name="lightEBC" default=""/>
  <arg name="positionUpdate" default="true"/>

  <arg name="machine" default="localhost" />
  <arg name="user" default="" />

  <!-- NOW when launching in a remote mode it will need the ROS_ENV_LOADER set if not it will leave it empty -->
  <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true" />

  <!-- strands_movebase -->
  <include file="$(find strands_movebase)/launch/movebase.launch">
    <arg name="machine"  value="$(arg machine)"/>
    <arg name="user"  value="$(arg user)"/>

    <arg name="with_chest_xtion" value="$(arg with_chest_xtion)"/>
    <arg name="chest_xtion_name" value="$(arg chest_xtion_name)"/>
    <arg name="chest_xtion_machine" value="$(arg chest_xtion_machine)"/>
    <arg name="chest_xtion_user" value="$(arg chest_xtion_user)"/>

    <arg name="head_xtion_machine" value="$(arg head_xtion_machine)"/>
    <arg name="head_xtion_user" value="$(arg head_xtion_user)"/>

    <arg name="map" value="$(arg map)"/>
    <arg name="with_no_go_map" value="$(arg with_no_go_map)"/>
    <arg name="with_mux" value="$(arg with_mux)"/>
    <arg name="no_go_map" value="$(arg no_go_map)"/>

    <arg name="z_stair_threshold" value="$(arg z_stair_threshold)"/>
    <arg name="z_obstacle_threshold" value="$(arg z_obstacle_threshold)"/>
    <arg name="with_head_xtion" value="$(arg with_head_xtion)"/>

    <arg name="with_site_movebase_params" value="$(arg with_site_movebase_params)"/>
    <arg name="site_movebase_params" value="$(arg site_movebase_params)"/>

    <arg name="subsample_resolution" value="$(arg subsample_resolution)"/>
    <arg name="subsample_min_points" value="$(arg subsample_min_points)"/>
    <arg name="subsample_skip_points" value="$(arg subsample_skip_points)"/>
  </include>

  <!--- Docking -->
  <include unless="$(arg with_mux)" file="$(find scitos_docking)/launch/charging.launch">
    <arg name="machine"  value="$(arg machine)"/>
    <arg name="user"  value="$(arg user)"/>
    <arg name="lightEBC"  value="$(arg lightEBC)"/>
    <arg name="positionUpdate"  value="$(arg positionUpdate)"/>
  </include>
  <include if="$(arg with_mux)" file="$(find scitos_docking)/launch/charging_mux.launch">
    <arg name="machine"  value="$(arg machine)"/>
    <arg name="user"  value="$(arg user)"/>
    <arg name="lightEBC"  value="$(arg lightEBC)"/>
    <arg name="positionUpdate"  value="$(arg positionUpdate)"/>
  </include>

  <!-- Backtrack server -->
  <include file="$(find backtrack_behaviour)/launch/backtrack.launch"/>

  <!--- Topological Navigation (includes monitored_navigation) -->
  <include file="$(find topological_navigation)/launch/topological_navigation.launch">
    <arg name="machine"  value="$(arg topo_nav_machine)"/>
    <arg name="user"  value="$(arg topo_nav_user)"/>
    <arg name="map" value="$(arg topological_map)"/>
    <arg name="mon_nav_config_file" value="$(arg mon_nav_config_file)"/>
    <arg name="wait_reset_bumper_duration" value="$(arg wait_reset_bumper_duration)"/>
  </include>

    <!--- Emergency Behaviours includes strands emails -->
  <include file="$(find emergency_behaviours)/launch/emergency_behaviours.launch">
    <arg name="machine" value="$(arg topo_nav_machine)"/>
    <arg name="user" value="$(arg topo_nav_user)"/>
    <arg name="smtp_server" value="$(arg smtp_server)"/>
    <arg name="from_add" value="$(arg from_add)"/>
    <arg name="to_add" value="$(arg to_add)"/>
  </include>

  <node name="odometry_mileage" pkg="odometry_mileage" type="odometry_mileage" respawn="true"/>
  <!-- <node name="door_pass_node" pkg="door_pass" type="door_pass.py" output="screen" /> --> <!-- Might still be needed -->
  <node pkg="door_pass" type="door_prediction.py" name="door_prediction" output="screen"/>
  
  
  <group if="$(arg with_human_aware)">
    <node name="gaze_at_pose" pkg="strands_gazing" type="gaze_at_pose" respawn="true"/>
    <node name="pose_extractor" pkg="pose_extractor" type="extract_last_pose_from_path.py" respawn="true"/>
    <include file="$(find strands_human_aware_navigation)/launch/human_aware_navigation.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
      <arg name="timeout"  value="$(arg timeout)"/>
      <arg name="max_dist"  value="$(arg max_dist)"/>
      <arg name="min_dist"  value="$(arg min_dist)"/>
      <arg name="detection_angle"  value="$(arg detection_angle)"/>
      <arg name="gaze_type"  value="$(arg gaze_type)"/>
    </include>
    
    <include file="$(find han_action_dispatcher)/launch/han_action_dispatcher.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
    </include>
    
  </group>
</launch>
